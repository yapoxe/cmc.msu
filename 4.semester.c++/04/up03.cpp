/*
Напишите шаблонную функцию myfilter, которая принимает два двунаправленных итератора (begin и end), класс-предикат и значение. 
Функция проходит по коллекции и все элементы, для которых выполняется предикат, заменяет на переданное значение. 
Значение является необязательным параметором, в случае его отсутствия используется значение по умолчанию соответствующего типа. 
Функция возвращает число измененных элементов.
Стандартными алгоритмами пользоваться запрещено.
Автор: Владимир (vk.com/yapoxe) 
*/
template <class A, class Predicat>
int myfilter(A begin, A end, Predicat p, typename A::value_type x = typename A::value_type()) {
    int j = 0;
    for(; begin != end; begin++) {
        if (p(*begin) != 0) {
            ++j;
            *begin = x;
        }
    }
    return j;
}